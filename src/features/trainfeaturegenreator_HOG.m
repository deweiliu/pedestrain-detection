%% Parameters
% positives(struct) - the struct of positive images
% negatives(struct) - the struct of negatives images
%% Returns
% features(matrix) - all feature data generated by HOG based on pos and neg images
function [features] = trainfeaturegenreator_HOG(positives, negatives)
% generating features files
features = [];
% check the existance of features files folder
if exist('../dataset/features_datasets','dir')==0
    disp(fprintf("path: ../dataset/features_datasets does not exist.\nCreating one."));
    mkdir('../dataset/features_datasets'); 
end

% reading features generated by HOG
if ~exist('../dataset/features_datasets/features_HOG_cellsize_12_12.csv','file')==0
    disp(fprintf("Features dataset HOG exists, reading the dataset.\n"));
    features = readtable('../dataset/features_datasets/features_HOG_cellsize_12_12.csv');
else
    disp(fprintf("Features dataset does not exist."));
    disp(fprintf('Starting generating features, please wait...'))
    % generate features of positive images
    for i=1:size(positives.paths,1)
        pos_image = imread(positives.paths(i));
        [featureVector,~] = extractHOGFeatures(pos_image,'CellSize',[12,12]);
        features = [features;featureVector];
    end
    % generate features of negatives images
    for i=1:size(negatives.paths,1)
        neg_image = imread(negatives.paths(i));
        [featureVector,~] = extractHOGFeatures(neg_image,'CellSize',[12,12]);
        features = [features;featureVector];
    end
    allLabels = [positives.labels; negatives.labels];
    % reformat the training data
    features = array2table(features);
    allLabels = array2table(allLabels, 'VariableNames',{'Labels'});
    features = [allLabels,features];
    % shuffle the data
    rng(3064);
    features = features(randperm(size(features,1)),:);
    % write on a csv file
    disp(fprintf('Features generation finishs.\nSaving as csv file.'))
    writetable(features, '../dataset/features_datasets/features_HOG_cellsize_12_12.csv')
    disp(fprintf('Saving finish.'))
end
end

