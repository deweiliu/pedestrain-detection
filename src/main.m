% Main matlab script

%% Clear the console and environment
clear all
close all

%% Images Aquisition
addpath("./image_aquisition");
pedestrians = loadimages("../dataset/pedestrian/");
positives = loadimages("../dataset/images/pos/");
negatives = loadimages("../dataset/images/neg/");
positives.labels = ones(positives.number, 1);
negatives.labels = zeros(negatives.number, 1);
pedestrians.labels = zeros(pedestrians.number, 1) -1;

%% Pre-processing TODO
addpath("./preprocessing");
pedestrians.images = preprocessing(pedestrians);
positives.images = preprocessing(positives);
negatives.images = preprocessing(negatives);

%% Feature Extraction on training set
addpath("./features");
features = featureExtraction(positives, negatives);

%% Fit the svm model using features generated by HOG
addpath("./classification");
svm_model = svmTrain(features.HOG);
svmtest(svm_model);

%% Fit the knn model using features generated by HOG
addpath("./classification");
knnModel = knnTrain(features.HOG, 5);
knnTest(knn_model);

%% Sliding windows
addpath("./sliding_windows");
SLIDING_WIDTH = positives.nColumns;
SLIDING_HEIGHT = positives.nRows;
SLIDING_SCALES = [0.8, 1.2, 1.6, 2];
SLIDING_GAP_PERCENTAGE = 0.4; % 40 per cent
pedestrians.sliding = slidingwindows(pedestrians, SLIDING_WIDTH, SLIDING_HEIGHT, SLIDING_SCALES, SLIDING_GAP_PERCENTAGE);

%% Generating features for all testing images creating by sliding windows
addpath("./features");
pedestrians = featureextractor_pedestrians(pedestrians);

%% Making prediction on all testing images by svm model
addpath("./classification")
pedestrians = fitsvmmodel_pedestrians(pedestrians, svm_model);

%% Visualize human images
addpath("./visualization")
scale_index = 4; % It can be 1 to 4 corresponding the position in 'SLIDING_SCALES'
frame_index = 1; % It can be 1 to 100 corresponding which frame to visualize
visualize_prediction(pedestrians, scale_index, frame_index)

%% presenting the result TODO
addpath("./presentation");
present(pedestrians);
